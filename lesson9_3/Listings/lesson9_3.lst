C51 COMPILER V9.60.7.0   LESSON9_3                                                         10/12/2024 16:22:05 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LESSON9_3
OBJECT MODULE PLACED IN .\Objects\lesson9_3.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lesson9_3.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\lesson9_3.lst) TABS(2) OBJECT(.\Objects\lesson9_3.obj)

line level    source

   1          #include <REG52.H>
   2          //通过按钮来控制步进电机
   3          
   4          sbit KeyIn1 = P2^4;
   5          sbit KeyIn2 = P2^5;
   6          sbit KeyIn3 = P2^6;
   7          sbit KeyIn4 = P2^7;
   8          sbit KeyOut1 = P2^3;
   9          sbit KeyOut2 = P2^2;
  10          sbit KeyOut3 = P2^1;
  11          sbit KeyOut4 = P2^0;
  12          
  13          unsigned char code KeyCodeMap[4][4] = { 
  14              { 0x31, 0x32, 0x33, 0x26 }, 
  15              { 0x34, 0x35, 0x36, 0x25 }, 
  16              { 0x37, 0x38, 0x39, 0x28 }, 
  17              { 0x30, 0x1B, 0x0D, 0x27 }  
  18          };
  19          
  20          unsigned char KeySta[4][4] = {  //全部按键的当前状态
  21              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  22          };
  23          signed long beats = 0;
  24          
  25          void KeyDriver();
  26          
  27          void main(){
  28   1        EA = 1;
  29   1        TMOD = 0x01;
  30   1        TH0 = 0xfc;
  31   1        TL0 = 0x67;
  32   1        ET0 = 1;
  33   1        TR0 = 1;
  34   1        while(1){
  35   2          KeyDriver();
  36   2        }
  37   1      }
  38          
  39          void StartMotor(signed long angle){
  40   1        EA = 0;
  41   1        beats = (angle*4076)/360;
  42   1        EA = 1;
  43   1      }
  44          
  45          void StopMotor(){
  46   1        EA = 0;
  47   1        beats = 0;
  48   1        EA = 1;
  49   1      }
  50          
  51          void KeyAction(unsigned char keycode){
  52   1        static bit dirMotor = 0;//转动方向
  53   1        
  54   1        if((keycode>=0x30)&&(keycode<=0x39)){
C51 COMPILER V9.60.7.0   LESSON9_3                                                         10/12/2024 16:22:05 PAGE 2   

  55   2          if(dirMotor==0){
  56   3            StartMotor(360*(int)(keycode-0x30));
  57   3          }
  58   2          else{
  59   3            StartMotor(-360*(int)(keycode-0x30));
  60   3          }
  61   2        }
  62   1        else if(keycode==0x26){
  63   2          dirMotor = 0;
  64   2        }
  65   1        else if(keycode==0x28){
  66   2          dirMotor = 1;
  67   2        }
  68   1        else if(keycode==0x25){
  69   2          StartMotor(90);
  70   2        }
  71   1        else if(keycode==0x27){
  72   2          StartMotor(-90);
  73   2        }
  74   1        else if(keycode==0x1b){
  75   2          StopMotor();
  76   2        }
  77   1      }
  78          
  79          void KeyDriver(){
  80   1        unsigned char i,j;
  81   1        static unsigned char backup[4][4] = {
  82   1          {1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}
  83   1        };
  84   1        for(i = 0;i<4;i++){
  85   2          for(j = 0;j<4;j++){
  86   3            if(backup[i][j]!=KeySta[i][j]){
  87   4              if(backup[i][j]!=0){
  88   5                KeyAction(KeyCodeMap[i][j]);//调用按键动作函数
  89   5              }
  90   4              backup[i][j] = KeySta[i][j];
  91   4            }
  92   3          }
  93   2        }
  94   1      }
  95          
  96          void KeyScan(){
  97   1        unsigned char i;
  98   1        static unsigned char keyout = 0;
  99   1        static unsigned char keybuf[4][4] = {  
 100   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF},
 101   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF}
 102   1        };
 103   1        
 104   1        keybuf[keyout][0] = (keybuf[keyout][0]<<1)|KeyIn1;
 105   1        keybuf[keyout][1] = (keybuf[keyout][1]<<1)|KeyIn2;
 106   1        keybuf[keyout][2] = (keybuf[keyout][2]<<1)|KeyIn3;
 107   1        keybuf[keyout][3] = (keybuf[keyout][3]<<1)|KeyIn4;
 108   1        
 109   1        for(i = 0;i<4;i++){
 110   2          if((keybuf[keyout][i] & 0x0f) == 0x00){
 111   3            KeySta[keyout][i] = 0;
 112   3          }
 113   2          else if((keybuf[keyout][i]& 0x0f)==0x0f){
 114   3            KeySta[keyout][i] = 1;
 115   3          }
 116   2        }
C51 COMPILER V9.60.7.0   LESSON9_3                                                         10/12/2024 16:22:05 PAGE 3   

 117   1        keyout++;
 118   1        keyout &=0x03;//到4归0
 119   1        switch(keyout){
 120   2          case 0:KeyOut4 = 1;KeyOut1 = 0;break;
 121   2          case 1:KeyOut1 = 1;KeyOut2 = 0;break;
 122   2          case 2:KeyOut2 = 1;KeyOut3 = 0;break;
 123   2          case 3:KeyOut3 = 1;KeyOut4 = 0;break;
 124   2          default:break;
 125   2        }
 126   1      }
 127          
 128          void TurnMotor(){
 129   1        unsigned char tmp;  
 130   1        static unsigned char index = 0; 
 131   1        unsigned char code BeatCode[8] = {
 132   1            0xE, 0xC, 0xD, 0x9, 0xB, 0x3, 0x7, 0x6
 133   1        };
 134   1        if(beats!=0){
 135   2          if(beats>0){
 136   3            index++;
 137   3            beats--;
 138   3            index &= 0x07;
 139   3          }
 140   2          else if(beats<0){
 141   3            index--;
 142   3            beats++;
 143   3            index &= 0x07;
 144   3          }
 145   2          tmp = P1;
 146   2          tmp &= 0xf0;
 147   2          tmp |= BeatCode[index];
 148   2          P1 = tmp;
 149   2        }
 150   1        else{
 151   2          P1 |= 0x0f;
 152   2        }
 153   1      }
 154          
 155          void InterruprTime0() interrupt 1{
 156   1        static bit div = 0;
 157   1        
 158   1        TH0 = 0xfc;
 159   1        TL0 = 0x67;
 160   1        KeyScan();//按键扫描
 161   1        
 162   1        div = ~div;
 163   1        if(div == 1){
 164   2          TurnMotor();//电机转动控制
 165   2        }
 166   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    712    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
